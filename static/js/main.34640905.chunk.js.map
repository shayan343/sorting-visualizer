{"version":3,"sources":["SortingAlgorithms/bubbleSort.js","SortingAlgorithms/mergeSort.js","SortingAlgorithms/insertionSort.js","SortingVisualizer/SortInfo/SortInfo.js","SortingVisualizer/SortInfo/AlgoDetails.js","SortingVisualizer/sortingVisualizer.js","SortingVisualizer/utility.js","index.js"],"names":["getBubbleSortAnimations","array","animations","length","i","j","push","tmp","bubbleSort","getMergeSortAnimations","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","k","doMerge","getInsertionSortAnimations","mn","insertionSort","SortInfo","title","description","worstCase","avgCase","bestCase","space","className","AlgoDetails","idx","ANIMATION_SPEED_MS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","useState","sortInfo","setSortInfo","algo","setAlgo","setArray","resetArray","min","max","random","algoSwitch","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight1","newHeight2","height","newHeight","mergeSort","last","globalLast","barIdx","console","log","infoSwitch","useEffect","Navbar","bg","variant","Brand","href","Nav","Link","onClick","NavDropdown","id","Item","map","value","marginRight","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.34640905.chunk.js","sourcesContent":["export default function getBubbleSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    bubbleSort(array, animations);\n    return animations;\n  }\n  \n  function bubbleSort(array, animations = []) {\n    var length = array.length;\n  \n    for (var i = 0; i < length; i++) {\n      for (var j = 0; j < length - i - 1; j++) {\n        animations.push([j, j + 1]);\n        if (array[j] > array[j + 1]) {\n          var tmp = array[j];\n          array[j] = array[j + 1];\n          array[j + 1] = tmp;\n          animations.push([j, j + 1, array[j], array[j + 1]]);\n        } else animations.push([j, j + 1, array[j], array[j + 1]]);\n        animations.push([j, j + 1]);\n      }\n    }\n    return array;\n  }\n  ","export function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      animations.push([i, j]);\n  \n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      animations.push([i, i]);\n  \n      animations.push([i, i]);\n  \n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      animations.push([j, j]);\n  \n      animations.push([j, j]);\n  \n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  ","export default function getInsertionSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    insertionSort(array, animations);\n    return animations;\n  }\n  \nfunction insertionSort(array, animations = []) {\n    var length = array.length;\n    for (var i = 0; i < length - 1; i++) {\n        animations.push([i, -10]);\n        var mn = i;\n        for (var j = i + 1; j < length; j++) {\n            if (array[mn] > array[j]) {\n                mn = j;\n                animations.push([mn, -1]);\n            }\n        }\n        var tmp = array[mn];\n        array[mn] = array[i];\n        array[i] = tmp;\n        animations.push([i, mn, array[i], array[mn]]);\n        // console.log((animations[animations.length-1]).length);\n        animations.push([i, mn, -1]);\n    }\n    return array;\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './style.css';\n\nconst SortInfo = ({\n  title,\n  description,\n  worstCase,\n  avgCase,\n  bestCase,\n  space\n}) => {\n  return (\n    <div className=\"SortInfo\">\n      <hr />\n      <h1>{title ? title : 'Select Algorithm'}</h1>\n\n      <div className=\"SortInfo__Body\">\n        <article className=\"SortInfo__Article\">\n          {description ? (\n            description\n          ) : (\n            <p>\n              You must select an algorithm before you can visualize it's\n              execution on an array of numbers.\n            </p>\n          )}\n        </article>\n\n        <aside className=\"SortInfo__Aside\">\n          <h3>Performance</h3>\n          <table>\n            <tbody>\n              <tr>\n                <td>Worst-case time complexity</td>\n                <td>\n                  <code>{worstCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Average time complexity</td>\n                <td>\n                  <code>{avgCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Best-case time complexity</td>\n                <td>\n                  <code>{bestCase}</code>\n                </td>\n              </tr>\n\n              <tr>\n                <td>Worst-case space complexity</td>\n                <td>\n                  <code>{space}</code>\n                </td>\n              </tr>\n            </tbody>\n          </table>\n        </aside>\n      </div>\n    </div>\n  );\n};\n\nSortInfo.propTypes = {\n  title: PropTypes.string,\n  description: PropTypes.object,\n  worstCase: PropTypes.object,\n  avgCase: PropTypes.object,\n  bestCase: PropTypes.object,\n  space: PropTypes.object\n};\n\nexport default SortInfo;","const AlgoDetails = (idx) => {\n    const ob1 = {\n        \"title\" : \"Bubble Sort\",\n        \"description\" : `Bubble Sort is a simple sorting algorithm that repeatedly steps through the list,\n        compares adjacent elements and swaps them if they are in the wrong order.The pass through the list\n        is repeated until the list is sorted. The algorithm, which is a comparison sort, is named for the\n        way smaller or larger elements \"bubble\" to the top of the list. Although the algorithm is simple,\n        it is too slow and impractical for most problems`,\n        \"worstCase\" : \"O(n2)\",\n        \"avgCase\" : \"O(n2)\",\n        \"bestCase\" : \"O(n)\",\n        \"space\" : \"O(n2)\"\n    };\n    const ob2 = {\n        \"title\" : \"Merge Sort\",\n        \"description\" : `Merge Sort is an efficient, stable sorting algorith that makes use of the divide and conquer strategy. Conceptually the algorithm works as follows:\n\n        Divide the unsorted list into n sublists, each containing one element(a list of one element is considered sorted)\n        Repeatedly merge sublists to produce new sorted sublists until there is only one sublist remaining. This will be the sorted list.`,\n        \"worstCase\" : \"O(nlogn)\",\n        \"avgCase\" : \"O(nlogn)\",\n        \"bestCase\" : \"O(nlogn)\",\n        \"space\" : \"O(n)\"\n    };\n    const ob3 = {\n        \"title\" : \"Insertion Sort\",\n        \"description\" : `Merge Sort is an efficient, stable sorting algorith that makes use of the divide and conquer strategy. Conceptually the algorithm works as follows:\n\n        Divide the unsorted list into n sublists, each containing one element(a list of one element is considered sorted)\n        Repeatedly merge sublists to produce new sorted sublists until there is only one sublist remaining. This will be the sorted list.`,\n        \"worstCase\" : \"O(nlogn)\",\n        \"avgCase\" : \"O(nlogn)\",\n        \"bestCase\" : \"O(nlogn)\",\n        \"space\" : \"O(n)\"\n    };\n\n    switch (idx) {\n        case 1: return ob1; \n        case 2: return ob2;\n        case 3: return ob3;\n        default: break;\n    }\n    \n}\n\nexport default AlgoDetails;\n","/* eslint-disable no-loop-func */\nimport React, { useEffect, useState } from \"react\";\nimport \"./sortingVisualizer.css\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Navbar, NavDropdown, Nav } from 'react-bootstrap';\nimport getBubbleSortAnimations from \"../SortingAlgorithms/bubbleSort\";\nimport { getMergeSortAnimations } from \"../SortingAlgorithms/mergeSort\";\nimport getInsertionSortAnimations from \"../SortingAlgorithms/insertionSort\";\nimport randomIntFromInterval from \"./utility\";\nimport SortInfo from \"./SortInfo/SortInfo\";\nimport AlgoDetails from \"./SortInfo/AlgoDetails\";\n\n\nconst ANIMATION_SPEED_MS = 15;\n\nconst NUMBER_OF_ARRAY_BARS = 25;\n\nconst PRIMARY_COLOR = \"#fff\";\n\nconst SECONDARY_COLOR = \"#f69\";\n\n\n\nconst SortingVisualizer = () => {\n  \n  const [sortInfo, setSortInfo] = useState([{}]);\n  const [algo, setAlgo] = useState();\n  const [array, setArray] = useState([]);\n  //const [disable, setDisable] = useState(false);\n\n\n\n  useEffect(() => {\n    resetArray();\n  }, [])\n  \n  \n\n  function resetArray() {\n    const array = [];\n    for (let i = 0; i < NUMBER_OF_ARRAY_BARS; i++) {\n      array.push(randomIntFromInterval(50, 600));\n    }\n\n    setArray(array);\n  }\n   \n  \n  function mergeSort() {\n    const animations = getMergeSortAnimations(array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 2;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, newHeight] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          barOneStyle.height = `${newHeight/10}vh`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n  function bubbleSort() {\n    const animations = getBubbleSortAnimations(array);\n    for (let i = 0; i < animations.length; i++) {\n      const arrayBars = document.getElementsByClassName(\"array-bar\");\n      const isColorChange = i % 3 !== 1;\n      if (isColorChange) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIdx, barTwoIdx, newHeight1, newHeight2] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.height = `${newHeight1 / 10}vh`;\n          barTwoStyle.height = `${newHeight2 / 10}vh`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n    \n  }\n\n  function insertionSort() {\n    const animations = getInsertionSortAnimations(array);\n    const arrayBars = document.getElementsByClassName(\"array-bar\");\n    var last = -1, globalLast = -1;\n    for (let i = 0; i < animations.length; i++) {\n      if ((animations[i]).length === 2) {\n        const [barIdx, flag] = animations[i];\n        if (flag === -10) {\n          setTimeout(() => {\n              \n            if (globalLast !== -1) {\n              setTimeout(() => {\n                arrayBars[globalLast].style.backgroundColor = PRIMARY_COLOR;\n              }, i * ANIMATION_SPEED_MS);\n              // if(last !== -1) {\n              //   setTimeout(() => {\n              //   arrayBars[last].style.backgroundColor = PRIMARY_COLOR;\n              //   }, i*ANIMATION_SPEED_MS);\n              //   last = -1;\n              // }\n              arrayBars[barIdx].style.backgroundColor = \"grey\";\n            }\n          }, i * ANIMATION_SPEED_MS);\n          globalLast = barIdx;\n        }\n        else {\n          console.log(last);\n          if (last !== -1) {\n            console.log(\"A\" + last);\n            setTimeout(() => {\n              arrayBars[last].style.backgroundColor = PRIMARY_COLOR;\n            }, i * ANIMATION_SPEED_MS);\n          }\n          setTimeout(() => {\n            arrayBars[barIdx].style.backgroundColor = SECONDARY_COLOR;\n          }, i * ANIMATION_SPEED_MS);\n          last = barIdx;\n          // console.log(last);\n        }\n      }\n      else if ((animations[i]).length === 3) {\n        const [barOneIdx, barTwoIdx] = animations[i];\n        const barOneStyle = arrayBars[barOneIdx].style;\n        const barTwoStyle = arrayBars[barTwoIdx].style;\n        const color = PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        // console.log((animations[i]).length());\n        setTimeout(() => {\n          const [barOneIdx, barTwoIdx, newHeight1, newHeight2] = animations[i];\n          const barOneStyle = arrayBars[barOneIdx].style;\n          const barTwoStyle = arrayBars[barTwoIdx].style;\n          barOneStyle.height = `${newHeight1 / 10}vh`;\n          barTwoStyle.height = `${newHeight2 / 10}vh`;\n          barOneStyle.backgroundColor = PRIMARY_COLOR;\n          barTwoStyle.backgroundColor = PRIMARY_COLOR;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n\n  function algoSwitch(algo) {\n    switch(algo) {\n      case 1: bubbleSort(); break;\n      case 2: mergeSort(); break;\n      case 3: insertionSort(); break;\n      default: break;\n    }\n  }\n  function infoSwitch(algo) {\n    switch (algo) {\n      case 1: setAlgo(1);\n        setSortInfo([AlgoDetails(1)]); break;\n      \n      case 2: setAlgo(2); \n        setSortInfo([AlgoDetails(2)]); break;\n      \n        case 3: setAlgo(3);\n        setSortInfo([AlgoDetails(3)]); break;\n      default: break;\n    }\n  }\n    \n\n    return (\n      <div>\n        {/* <div className=\"header\">\n          <button className=\"buttonStyle\" onClick={() => resetArray()}>\n            Randomize\n          </button>\n          <button className=\"buttonStyle\" onClick={() => infoSwitch(1)}>\n            Bubble Sort\n          </button>\n\n          <button className=\"buttonStyle\" onClick={() => infoSwitch(2)}>\n            Merge Sort\n          </button>\n          <button className=\"buttonStyle\" onClick={() => infoSwitch(3)}>\n            Insertion Sort\n          </button>\n          <button className=\"buttonStyle\" disabled={disable} onClick={() => algoSwitch(algo)}>\n            Visualize\n          </button>\n        </div> */}\n        \n  <Navbar bg=\"dark\" variant=\"dark\">\n    <Navbar.Brand href=\"#home\">Sorting Visualizer</Navbar.Brand>\n    <Nav className=\"ml-auto\">\n      <Nav.Link href=\"#home\" onClick={()=>resetArray()}>Randomize</Nav.Link>\n      <Nav.Link href=\"#features\" onClick={()=>algoSwitch(algo)}>Visualize</Nav.Link>\n      <NavDropdown title=\"Select Algorithm\" id=\"collasible-nav-dropdown\">\n        <NavDropdown.Item href=\"#action/3.1\" onClick={()=>infoSwitch(1)}>Bubble Sort</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.2\" onClick={()=>infoSwitch(2)}>Merge Sort</NavDropdown.Item>\n        <NavDropdown.Item href=\"#action/3.3\" onClick={()=>infoSwitch(3)}>Insertion Sort</NavDropdown.Item>\n      </NavDropdown>\n    </Nav>\n    \n  </Navbar>\n \n          \n      \n\n        <div className=\"container\">{array.map((value, idx) => (\n          <div\n            className=\"array-bar\"\n            key={idx}\n            style={{\n                height: `${value / 10}vh`,\n                marginRight: `0.3vw`\n            }}\n          ></div>\n        ))}</div>\n        <SortInfo title={sortInfo[0].title}\n          description={sortInfo[0].description}\n          worstCase={sortInfo[0].worstCase}\n          avgCase={sortInfo[0].avgCase}\n          bestCase={sortInfo[0].bestCase}\n          space={sortInfo[0].space}\n        />\n      </div>\n    );\n  }\n\n\nexport default SortingVisualizer;","export default function randomIntFromInterval(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  }\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport SortingVisualizer from './SortingVisualizer/sortingVisualizer';\n\nReactDOM.render(\n  <SortingVisualizer />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}